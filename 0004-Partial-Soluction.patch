From 4f9be9f923cfebfa46e370000e68ccab3c0421d5 Mon Sep 17 00:00:00 2001
From: julianorinaldi <julianorinaldi@gmail.com>
Date: Sun, 8 Jul 2018 00:01:26 -0300
Subject: [PATCH 4/5] Partial Soluction

---
 .../Controller/AnalyticsControllerTests.cs         |  1 -
 .../Controller/PanelControllerTests.cs             |  1 -
 CrossSolar/Controllers/AnalyticsController.cs      | 37 ++++++++++++++++++----
 CrossSolar/Models/OneHourElectricityModel.cs       |  3 ++
 CrossSolar/Properties/launchSettings.json          |  3 +-
 CrossSolar/appsettings.Development.json            |  2 +-
 CrossSolar/appsettings.json                        |  2 +-
 7 files changed, 36 insertions(+), 13 deletions(-)

diff --git a/CrossSolar.Tests/Controller/AnalyticsControllerTests.cs b/CrossSolar.Tests/Controller/AnalyticsControllerTests.cs
index 5048263..be98b86 100644
--- a/CrossSolar.Tests/Controller/AnalyticsControllerTests.cs
+++ b/CrossSolar.Tests/Controller/AnalyticsControllerTests.cs
@@ -122,7 +122,6 @@ namespace CrossSolar.Tests.Controller
                 DateTime = DateTime.Now,
                 KiloWatt = 100
             };
-
             // Act
             var result = await _analyticsController.Post(panelId, oneHourElectricityModel);
 
diff --git a/CrossSolar.Tests/Controller/PanelControllerTests.cs b/CrossSolar.Tests/Controller/PanelControllerTests.cs
index c471281..d05ccc2 100644
--- a/CrossSolar.Tests/Controller/PanelControllerTests.cs
+++ b/CrossSolar.Tests/Controller/PanelControllerTests.cs
@@ -22,7 +22,6 @@ namespace CrossSolar.Tests.Controller
         [Fact]
         public async Task Register_ShouldInsertPanel()
         {
-            // TODO: JULIANO - Verificar quantidade de decimais em Logitude e Latitude (Max 6 digits)
             var panel = new PanelModel
             {
                 Brand = "Areva",
diff --git a/CrossSolar/Controllers/AnalyticsController.cs b/CrossSolar/Controllers/AnalyticsController.cs
index b180751..1a46e2d 100644
--- a/CrossSolar/Controllers/AnalyticsController.cs
+++ b/CrossSolar/Controllers/AnalyticsController.cs
@@ -25,7 +25,7 @@ namespace CrossSolar.Controllers
         }
 
         // GET panel/XXXX1111YYYY2222/analytics
-        [HttpGet("{banelId}/[controller]")]
+        [HttpGet("{panelId}/[controller]")]
         public async Task<IActionResult> Get([FromRoute, StringLength(16), Required] string panelId)
         {
             var panel = await _panelRepository.Query()
@@ -53,13 +53,36 @@ namespace CrossSolar.Controllers
         [HttpGet("{panelId}/[controller]/day")]
         public async Task<IActionResult> DayResults([FromRoute, StringLength(16), Required] string panelId)
         {
+            // BUG FIX - Check Exists Panel
+            if (!_panelRepository.Query().Any(x => x.Serial.Equals(panelId, StringComparison.CurrentCultureIgnoreCase)))
+                return BadRequest();
 
-            //TODO: Bug Fix - Get Elements - Verificar enunciado
-            //3) A equipe de front-end deseja exibir todos os dados históricos do painel em um gráfico, no qual cada ponto representa a eletricidade gerada por esse painel a cada dia [soma, min, max, média] até o final do dia anterior, seu objetivo é implementar backend parte dessa tarefa, as especificações da API já estão no código, conforme acordado com a equipe do Frontend, e não há problema em implementar essa tarefa sem qualquer otimização.
-
-            var result = new List<OneDayElectricityModel>();
-
-            return Ok(result);
+            /* BUG FIX - Return Historical
+             3) Frontend team wants to display panel’s all historical data in a chart, 
+             in which each point represents electricity generated by this panel 
+             each day [sum, min, max, average] up to the end of previous day , 
+             your goal is to implement backend part of this task, API specifications 
+             already there in code as agreed with Frontend team, and it is ok to implement 
+             this task without any optimization.
+            */
+            var statisticsList = await _analyticsRepository.Query()
+                .Where(x => x.PanelId.Equals(panelId, StringComparison.CurrentCultureIgnoreCase)).Select(
+                    x => new
+                    {
+                        DateTime = new DateTime(x.DateTime.Year, x.DateTime.Month, x.DateTime.Day, 0, 0, 0),
+                        KiloWatt = x.KiloWatt
+                    }).GroupBy(p => p.DateTime).Select(
+                        g => new OneDayElectricityModel()
+                        {
+                            DateTime = g.Key,
+                            Sum = g.Sum(s => s.KiloWatt),
+                            Average = g.Average(a => a.KiloWatt),
+                            Minimum = g.Min(m => m.KiloWatt),
+                            Maximum = g.Max(m => m.KiloWatt)
+                        }
+                    ).OrderBy(o => o.DateTime).ToListAsync();
+
+            return Ok(statisticsList);
         }
 
         // POST panel/XXXX1111YYYY2222/analytics
diff --git a/CrossSolar/Models/OneHourElectricityModel.cs b/CrossSolar/Models/OneHourElectricityModel.cs
index a278d9d..86cb228 100644
--- a/CrossSolar/Models/OneHourElectricityModel.cs
+++ b/CrossSolar/Models/OneHourElectricityModel.cs
@@ -1,4 +1,5 @@
 ﻿using System;
+using System.ComponentModel.DataAnnotations;
 
 namespace CrossSolar.Models
 {
@@ -6,6 +7,8 @@ namespace CrossSolar.Models
     {
         public int Id { get; set; }
 
+        [Required]
+        [Range(0, 10000000000)]
         public long KiloWatt { get; set; }
 
         public DateTime DateTime { get; set; }
diff --git a/CrossSolar/Properties/launchSettings.json b/CrossSolar/Properties/launchSettings.json
index 671e816..acd5658 100644
--- a/CrossSolar/Properties/launchSettings.json
+++ b/CrossSolar/Properties/launchSettings.json
@@ -3,14 +3,13 @@
     "windowsAuthentication": false,
     "anonymousAuthentication": true,
     "iisExpress": {
-      "applicationUrl": "http://localhost:51063/",
+      "applicationUrl": "http://localhost:9000/",
       "sslPort": 0
     }
   },
   "profiles": {
     "IIS Express": {
       "commandName": "IISExpress",
-      "launchBrowser": true,
       "launchUrl": "api/values",
       "environmentVariables": {
         "ASPNETCORE_ENVIRONMENT": "Development"
diff --git a/CrossSolar/appsettings.Development.json b/CrossSolar/appsettings.Development.json
index 7b346f0..a2044ff 100644
--- a/CrossSolar/appsettings.Development.json
+++ b/CrossSolar/appsettings.Development.json
@@ -1,6 +1,6 @@
 ﻿{
   "ConnectionStrings": {
-    "DefaultConnection": "Server=.\\SQLEXPRESS;Database=CrossSolarDb;Trusted_Connection=True;"
+    "DefaultConnection": "Data Source=localhost;Initial Catalog=CrossSolarDb;User Id=sa;Password=numeric;"
   },
   "Logging": {
     "IncludeScopes": false,
diff --git a/CrossSolar/appsettings.json b/CrossSolar/appsettings.json
index 43e8e63..5072d11 100644
--- a/CrossSolar/appsettings.json
+++ b/CrossSolar/appsettings.json
@@ -1,6 +1,6 @@
 ﻿{
   "ConnectionStrings": {
-    "DefaultConnection": "Server=.\\SQLEXPRESS;Database=CrossSolarDb;Trusted_Connection=True;"
+    "DefaultConnection": "Data Source=localhost;Initial Catalog=CrossSolarDb;User Id=sa;Password=numeric;"
   },
   "Logging": {
     "IncludeScopes": false,
-- 
2.16.1.windows.4

